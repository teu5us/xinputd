#!/usr/bin/env -S guile -s
-*- mode: scheme -*-
!#

(use-modules ((ice-9 rdelim)
              #:select (read-string))
             ((ice-9 popen)
              #:select ((open-input-pipe . input-pipe)
                        (open-output-pipe . output-pipe)
                        close-pipe))
             ((ice-9 ftw)
              #:select (scandir))
             ((srfi srfi-1)
              #:select ((delete-duplicates . dedup))))

(define *rules-conf*
  (let ((conf (getenv "XINPUTDC")))
    (if conf conf
        (string-append (getenv "HOME") "/.xinputd"))))

(define (read-command command)
  (let* ((p (input-pipe command))
         (output (with-input-from-port p
                    (lambda ()
                      (read-string)))))
    (close-pipe p)
    output))

(define (read-file file)
  (with-input-from-file file
    (lambda ()
      (read-string))))

(define (get-devices)
  (dedup
   (string-split (read-command "xinput list --name-only")
                 #\newline)))

(define (get-rules)
  (eval-string (read-file *rules-conf*)))

(define (apply-rule rule-str)
  (let ((p (output-pipe "sh")))
    (display (string-append rule-str "\n") p)
    (close-pipe p)))

(define (apply-device-rules device)
  (let* ((+rules+ (get-rules))
         (*known-devices* (map car +rules+)))
    (when (member device *known-devices*)
      (let ((device-rules (map (lambda (rule)
                                 (format #f rule device))
                               (cadr (assoc device +rules+)))))
        (map apply-rule device-rules)))))

(define (app-loop)
  (let ((+devices+ (get-devices)))
    (while #t
      (let* ((current-devices (get-devices))
             (devcomp (equal? (length current-devices)
                              (length +devices+))))
        (if devcomp
            (continue)
            (begin
              (map apply-device-rules
                   (filter (lambda (el) (not (member el +devices+)))
                           current-devices))
              (set! +devices+ current-devices))))
      (sleep 5))))

(define (run-xinputd)
  (app-loop))

(run-xinputd)
